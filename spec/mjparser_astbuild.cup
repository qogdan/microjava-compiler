package rs.ac.bg.etf.pp1;
import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}


scan with {:

	Symbol s = this.getScanner().next_token();
	if(s != null && s.value != null)
		log.info(s.toString() + " " +s.value.toString());
	return s;

:}

terminal String IDENT;
terminal Character CHAR;
terminal Integer NUMBER;
terminal Boolean BOOL;
terminal PROG;
terminal LBRACE, RBRACE, PRINT, LPAREN, RPAREN, LBRACK, RBRACK;
terminal RETURN, STATIC, NAMESPACE;
terminal BREAK, CLASS, ELSE, CONST, IF, NEW, READ, VOID, EXTENDS, CONTINUE, FOR;
terminal PLUS, MINUS, MUL, DIV, MOD, EQUAL, NOTEQUAL, GRT, GRTE;
terminal LESS, LESSE, AND, OR, ASSIGN, INC, DEC, SEMI, COLON, COMMA, DOT, LAMBDA;
terminal RANGE;

nonterminal NamespaceList NamespaceList;
nonterminal NamespaceName NamespaceName;
nonterminal VarDeclList VarDeclList;
nonterminal VarDecls VarDecls;
nonterminal MethodDeclList MethodDeclList;
nonterminal MethodReturnType MethodReturnType;
nonterminal DeclarationList DeclarationList;
nonterminal Declaration Declaration;
nonterminal ConstDeclList ConstDeclList;
nonterminal ClassDeclList ClassDeclList;
nonterminal ConstDecl ConstDecl;
nonterminal ConstDeclarations ConstDeclarations;
nonterminal ClassDecl ClassDecl;
nonterminal StaticVarDeclList StaticVarDeclList;
nonterminal StVar StVar;
nonterminal VarDeclarationsStatic VarDeclarationsStatic;
nonterminal VarItemStatic VarItemStatic;
nonterminal VarDeclarations VarDeclarations;
nonterminal Brackets Brackets;
nonterminal FormPars FormPars;
nonterminal FormParsItem FormParsItem;
nonterminal StaticInitializer StaticInitializer ;
nonterminal StaticInitializers StaticInitializers;
nonterminal StaticInitializerList StaticInitializerList;
nonterminal VarDecl VarDecl;
nonterminal Vars Vars;
nonterminal VarItem VarItem;
nonterminal Resolve Resolve;
nonterminal Matched Matched;
nonterminal Mulop Mulop;
nonterminal Addop Addop;
nonterminal Relop Relop;
nonterminal Assignop Assignop;
nonterminal Label Label;
nonterminal ActPars ActPars;
nonterminal ExprList ExprList;
nonterminal Statement Statement;
nonterminal StatementList StatementList;
nonterminal ElseList ElseList;
nonterminal PrintList PrintList;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal LBrackOpen LBrackOpen;
nonterminal ForLoop ForLoop;
nonterminal SecondForLoop SecondForLoop;
nonterminal FirstThirdForLoop FirstThirdForLoop;
nonterminal DesignatorCommaList DesignatorCommaList;
nonterminal DCItem DCItem;
nonterminal Condition Condition;
nonterminal CondTerm CondTerm;
nonterminal CondFact CondFact;
nonterminal CondTermList CondTermList;
nonterminal CondFactList CondFactList; 

nonterminal FormParsList FormParsList;

nonterminal ErrorVarDeclarations ErrorVarDeclarations;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, Program, Type, MethodTypeName, MethodDecl, Designator, ConstItem, Namespace, DesignatorLeft;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Term, Factor, Expression, Constants;

precedence left ELSE;

/******************* PROGRAM *******************/

Program ::=(Program) PROG ProgName:p DeclarationList:D1 LBRACE MethodDeclList:M2 RBRACE {: RESULT=new Program(p, D1, M2); RESULT.setLine(pleft); :};

ProgName ::= (ProgName) IDENT:progName {: RESULT=new ProgName(progName); RESULT.setLine(progNameleft); :};


DeclarationList ::=
			(DeclarationListt) DeclarationList:D1 Declaration:D2 {: RESULT=new DeclarationListt(D1, D2); RESULT.setLine(D1left); :}
			|
			(NoDeclarationLists) {: RESULT=new NoDeclarationLists(); :}/* epsilon */
			;
					
Declaration ::= 
			(DeclarationConstt) ConstDecl:C1 {: RESULT=new DeclarationConstt(C1); RESULT.setLine(C1left); :}
			|
			(DeclarationVarr) VarDecl:V1 {: RESULT=new DeclarationVarr(V1); RESULT.setLine(V1left); :}
			;

/******** Const Declaration *************/

ConstDecl ::=
			(ConstDecll) CONST ConstDeclarations:C1 SEMI {: RESULT=new ConstDecll(C1); RESULT.setLine(C1left); :}
			;

ConstDeclarations ::=
			(MulConstDeclarations) ConstItem:C1 COMMA ConstDeclarations:C2 {: RESULT=new MulConstDeclarations(C1, C2); RESULT.setLine(C1left); :} 
			|
			(OneConstDeclaration) ConstItem:C1 {: RESULT=new OneConstDeclaration(C1); RESULT.setLine(C1left); :}
			;

ConstItem ::=(ConstItem) Type:constType IDENT:constName ASSIGN Constants:C1 {: RESULT=new ConstItem(constType, constName, C1); RESULT.setLine(constTypeleft); :};

StaticVarDeclList ::=
			(StaticVarDeclListt) StaticVarDeclList:S1 StVar:S2 {: RESULT=new StaticVarDeclListt(S1, S2); RESULT.setLine(S1left); :} 
			|
			(NoStaticVarDeclList) {: RESULT=new NoStaticVarDeclList(); :} /* */
			;

StVar ::=(StVar) STATIC Type:T1 VarDeclarationsStatic:V2 SEMI {: RESULT=new StVar(T1, V2); RESULT.setLine(T1left); :};
Constants ::=
			(NumberConstant) NUMBER:value {: RESULT=new NumberConstant(value); RESULT.setLine(valueleft); :} 
			| 
			(CharConstant) CHAR:value {: RESULT=new CharConstant(value); RESULT.setLine(valueleft); :} 
			| 
			(BooleanConstant) BOOL:value {: RESULT=new BooleanConstant(value); RESULT.setLine(valueleft); :}
			;

/***** Method declaration *********/

MethodDeclList ::=
			(MethodDeclarationList) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodDeclarationList(M1, M2); RESULT.setLine(M1left); :}
			|
			(NoMethodDeclaration) {: RESULT=new NoMethodDeclaration(); :}/* epsilon */
			;
			

MethodDecl ::= 
			(MethodDeclaration) MethodTypeName:M1 LPAREN FormParsList:F2 RPAREN VarDecls:V3 LBRACE StatementList:S4 RBRACE {: RESULT=new MethodDeclaration(M1, F2, V3, S4); RESULT.setLine(M1left); :};

MethodTypeName ::= (MethodTypeName) MethodReturnType:M1 IDENT:methodName {: RESULT=new MethodTypeName(M1, methodName); RESULT.setLine(M1left); :};

MethodReturnType ::= 
			(MethReturnType) Type:retType {: RESULT=new MethReturnType(retType); RESULT.setLine(retTypeleft); :} 
			| 
			(MethReturnVoid) VOID {: RESULT=new MethReturnVoid(); :}
			;

FormParsList::= FormPars:F1 {: RESULT=new FormParsListDerived1(F1); RESULT.setLine(F1left); :} | {: RESULT=new FormParsListDerived2(); :} /* */;

FormPars ::=
			(OneFormParam) FormParsItem:F1 {: RESULT=new OneFormParam(F1); RESULT.setLine(F1left); :}
			|
			(MulFormParam) FormPars:F1 COMMA FormParsItem:F2 {: RESULT=new MulFormParam(F1, F2); RESULT.setLine(F1left); :}
			;
			
FormParsItem ::=
			(VarFormParam) Type:T1 IDENT:varName Brackets:B2 {: RESULT=new VarFormParam(T1, varName, B2); RESULT.setLine(T1left); :}
			|
			(ErrorFormParamComma) error COMMA {: RESULT=new ErrorFormParamComma(); :}
			|
			(ErrorFormParamParen) error RPAREN {: RESULT=new ErrorFormParamParen(); :}
			;
			

/* VAR DECLARATION */

VarDecls ::=
			(VarDeclarationListWrap) VarDeclList:V1 {: RESULT=new VarDeclarationListWrap(V1); RESULT.setLine(V1left); :} 
			|
			(NoVarDeclaration) {: RESULT=new NoVarDeclaration(); :} /* epsilon */
			;

VarDeclList ::=
			(MulVarDeclarations) VarDeclList:V1 VarDecl:V2 {: RESULT=new MulVarDeclarations(V1, V2); RESULT.setLine(V1left); :} 
			|
			(OneVarDeclarations) VarDecl:V1 {: RESULT=new OneVarDeclarations(V1); RESULT.setLine(V1left); :}
			;

VarDecl ::=(VarDeclaration) Type:varType VarDeclarations:V1 SEMI {: RESULT=new VarDeclaration(varType, V1); RESULT.setLine(varTypeleft); :}
			|
			(VarDeclError) error SEMI
			{: parser.report_error("Izvrsen oporavak do ; u liniji " , null); :} {: RESULT=new VarDeclError(); :}
			
			|
			(ErrorBrackItem) error COMMA
			{: parser.report_error("Izvrsen oporavak do , u liniji " , null); :} {: RESULT=new ErrorBrackItem(); :}
			
			;

VarDeclarations ::=
			(MulDeclarationsOneType) VarItem:V1 COMMA  VarDeclarations:V2 {: RESULT=new MulDeclarationsOneType(V1, V2); RESULT.setLine(V1left); :} 
			|
			(OneDeclarationOneType) VarItem:V1 {: RESULT=new OneDeclarationOneType(V1); RESULT.setLine(V1left); :}
			
			;
			
			
VarItem ::=(VarItem) IDENT:varName Brackets:B1 {: RESULT=new VarItem(varName, B1); RESULT.setLine(varNameleft); :};	
			


VarDeclarationsStatic ::=
			(MulStaticDeclOneType) VarItemStatic:V1 COMMA  VarDeclarationsStatic:V2 {: RESULT=new MulStaticDeclOneType(V1, V2); RESULT.setLine(V1left); :} 
			|
			(OneStaticDeclOneType) VarItemStatic:V1 {: RESULT=new OneStaticDeclOneType(V1); RESULT.setLine(V1left); :}
			;

VarItemStatic ::= (StaticVariableIdent) IDENT:I1 {: RESULT=new StaticVariableIdent(I1); RESULT.setLine(I1left); :}
			|
			(StaticArrayIdent) IDENT:I1 LBRACK RBRACK {: RESULT=new StaticArrayIdent(I1); RESULT.setLine(I1left); :}
			
			;
			
Brackets ::=(WithBrackets) LBRACK RBRACK {: RESULT=new WithBrackets(); :}
			|
			(NoBrackets) {: RESULT=new NoBrackets(); :} /* ** EPSILON * */
			;

/******** Static initializer ********/


StaticInitializers ::= 
			(StaticInitListWrap) StaticInitializerList:S1 {: RESULT=new StaticInitListWrap(S1); RESULT.setLine(S1left); :} 
			|
			(NoStaticInitializer) {: RESULT=new NoStaticInitializer(); :} /* epsilon */
			;

StaticInitializerList ::=
			(MulStaticInit) StaticInitializerList:S1 StaticInitializer:S2 {: RESULT=new MulStaticInit(S1, S2); RESULT.setLine(S1left); :} 
			|
			(OneStaticInit) StaticInitializer:S1 {: RESULT=new OneStaticInit(S1); RESULT.setLine(S1left); :}
			;

StaticInitializer ::=(StaticInitializerr) STATIC LBRACE StatementList:S1 RBRACE {: RESULT=new StaticInitializerr(S1); RESULT.setLine(S1left); :};
			
		
/*********TYPE**************/

Type ::= (TypeIdent) IDENT:typeName {: RESULT=new TypeIdent(typeName); RESULT.setLine(typeNameleft); :};
Label ::= (Label) IDENT:I1 {: RESULT=new Label(I1); RESULT.setLine(I1left); :};

/********************* STATEMENT ***********************/
StatementList ::=
			(StatementListWrap) StatementList:S1 Statement:S2 {: RESULT=new StatementListWrap(S1, S2); RESULT.setLine(S1left); :}
			|
			(NoStatementList) {: RESULT=new NoStatementList(); :} /* epsilon */
			;
				
Statement ::= 
			(DesignatorStatements) DesignatorStatement:D1 SEMI {: RESULT=new DesignatorStatements(D1); RESULT.setLine(D1left); :}	
			|
			(MatchedStatements) Matched:M1 {: RESULT=new MatchedStatements(M1); RESULT.setLine(M1left); :}
			|
			(ErrorAssign) error SEMI:l
			{: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null); :} {: RESULT=new ErrorAssign(); :}
			
			;

DesignatorStatement ::= 
			(AssignDesignator) Designator:dest ASSIGN Expression:e {: RESULT=new AssignDesignator(dest, e); RESULT.setLine(destleft); :}
			|
			(MethodDesignator) Designator:D1 LPAREN ActPars:A2 RPAREN {: RESULT=new MethodDesignator(D1, A2); RESULT.setLine(D1left); :}
			|
			(IncrementDesignator) Designator:D1 INC {: RESULT=new IncrementDesignator(D1); RESULT.setLine(D1left); :}
			|
			(DecrementDesignator) Designator:D1 DEC {: RESULT=new DecrementDesignator(D1); RESULT.setLine(D1left); :}
			|
			(ArrayPointerAssignDesignator) LBRACK MUL Designator:D1 RBRACK ASSIGN Designator:D2 {: RESULT=new ArrayPointerAssignDesignator(D1, D2); RESULT.setLine(D1left); :}
			;

Matched ::= (BreakStmt) BREAK SEMI {: RESULT=new BreakStmt(); :}
			|
			(ContiunueStmt) CONTINUE SEMI {: RESULT=new ContiunueStmt(); :}
			|
			(ReturnStmt) RETURN SEMI {: RESULT=new ReturnStmt(); :}
			|
			(ReturnExpressionStmt) RETURN Expression:t SEMI {: RESULT=new ReturnExpressionStmt(t); RESULT.setLine(tleft); :}
			|
			(ReadDesignator) READ LPAREN Designator:D1 RPAREN SEMI {: RESULT=new ReadDesignator(D1); RESULT.setLine(D1left); :}
			|
			(PrintExpression) PRINT LPAREN Expression:E1 RPAREN SEMI {: RESULT=new PrintExpression(E1); RESULT.setLine(E1left); :}
			|
			(PrintExpressionNumber) PRINT LPAREN Expression:E1 COMMA NUMBER:N2 RPAREN SEMI {: RESULT=new PrintExpressionNumber(E1, N2); RESULT.setLine(E1left); :}
			|
			(IfStatement) IF LPAREN Condition:C1 RPAREN Statement:S2 {: RESULT=new IfStatement(C1, S2); RESULT.setLine(C1left); :}
			|
			(IfElseStatement) IF LPAREN Condition:C1 RPAREN Statement:S2 ELSE Statement:S3 {: RESULT=new IfElseStatement(C1, S2, S3); RESULT.setLine(C1left); :}
			|
			(StatementListInsideStatement) LBRACE StatementList:S1 RBRACE {: RESULT=new StatementListInsideStatement(S1); RESULT.setLine(S1left); :}
			;

/**********condition********/
Condition ::= 
			(ORCondition) Condition:C1 OR CondTerm:C2 {: RESULT=new ORCondition(C1, C2); RESULT.setLine(C1left); :}
			|
			(NoORCondition) CondTerm:C1 {: RESULT=new NoORCondition(C1); RESULT.setLine(C1left); :}
			;
CondTerm ::= 
			(ANDCondition) CondTerm:C1 AND CondFact:C2 {: RESULT=new ANDCondition(C1, C2); RESULT.setLine(C1left); :}
			|
			(NoANDCondition) CondFact:C1 {: RESULT=new NoANDCondition(C1); RESULT.setLine(C1left); :}
			;
CondFact ::= 
			(ConditionNoRelation) Expression:E1 {: RESULT=new ConditionNoRelation(E1); RESULT.setLine(E1left); :}
			|
			(RelationCondition) Expression:E1 Relop:R2 Expression:E3 {: RESULT=new RelationCondition(E1, R2, E3); RESULT.setLine(E1left); :}
			;


/*************DESIGNATOR********************************/	
	
Designator ::= 
			(IdentDesignator) IDENT:designatorName {: RESULT=new IdentDesignator(designatorName); RESULT.setLine(designatorNameleft); :}
			|
			(ArrayDesignator) DesignatorLeft:D1 LBrackOpen:L2 Expression:E3 RBRACK {: RESULT=new ArrayDesignator(D1, L2, E3); RESULT.setLine(D1left); :}
			;

DesignatorLeft ::=		
			(LeftIdentDesignator) IDENT:designatorName {: RESULT=new LeftIdentDesignator(designatorName); RESULT.setLine(designatorNameleft); :}
			|
			(BracketsDesignator) DesignatorLeft:D1 LBrackOpen:L2 Expression:E3 RBRACK {: RESULT=new BracketsDesignator(D1, L2, E3); RESULT.setLine(D1left); :}
			;	
						
LBrackOpen ::= (LBrackOpen) LBRACK {: RESULT=new LBrackOpen(); :};
						
				
DesignatorCommaList ::=
			(MulDesignatorListClassObj) DesignatorCommaList:D1 DCItem:D2 {: RESULT=new MulDesignatorListClassObj(D1, D2); RESULT.setLine(D1left); :} 
			|
			(OneDesignatorListClassObj) DCItem:D1 {: RESULT=new OneDesignatorListClassObj(D1); RESULT.setLine(D1left); :}
			;

DCItem ::=
			(DesignatorWithComma) Designator:D1 COMMA {: RESULT=new DesignatorWithComma(D1); RESULT.setLine(D1left); :} 
			|
			(OnlyCommaNoDesignator) COMMA {: RESULT=new OnlyCommaNoDesignator(); :}
			;
					
/*************************************************/

ActPars ::= 
			(ActParsExist) ExprList:E1 {: RESULT=new ActParsExist(E1); RESULT.setLine(E1left); :}
			|
			(NoActPars) {: RESULT=new NoActPars(); :} /* */
			;
			
ExprList ::= 
			(OneExpression) Expression:E1 {: RESULT=new OneExpression(E1); RESULT.setLine(E1left); :}
			|
			(MulExpression) ExprList:E1 COMMA Expression:E2 {: RESULT=new MulExpression(E1, E2); RESULT.setLine(E1left); :}
			;

/************EXPRESSION*********************/

Expression ::= 
			(MinusTermExpression) MINUS Term:t {: RESULT=new MinusTermExpression(t); RESULT.setLine(tleft); :}
			|
			(TermExpression) Term:t {: RESULT=new TermExpression(t); RESULT.setLine(tleft); :}
			|
			(AddopExpr) Expression:te Addop:A1 Term:t {: RESULT=new AddopExpr(te, A1, t); RESULT.setLine(teleft); :}
			;


Term ::= 
			(TermNoMulop) Factor:t {: RESULT=new TermNoMulop(t); RESULT.setLine(tleft); :}
			|
			(MulopTerm) Term:tt Mulop:M1 Factor:t {: RESULT=new MulopTerm(tt, M1, t); RESULT.setLine(ttleft); :}
			;

					
/********  factor    ***************/
/* posto nam treba da factor bude struct, moraju i term i expression da budu struct */

Factor ::= 
			(FactorNumber) NUMBER:value {: RESULT=new FactorNumber(value); RESULT.setLine(valueleft); :}
			|
			(FactorChar) CHAR:value {: RESULT=new FactorChar(value); RESULT.setLine(valueleft); :}
			|
			(FactorBool) BOOL:value {: RESULT=new FactorBool(value); RESULT.setLine(valueleft); :}
			|
			(FactorDesignator) Designator:d {: RESULT=new FactorDesignator(d); RESULT.setLine(dleft); :}
			|
			(FactorDesignatorMeth) Designator:func LPAREN ActPars:A1 RPAREN {: RESULT=new FactorDesignatorMeth(func, A1); RESULT.setLine(funcleft); :}
			|
			(FactorExpression) LPAREN Expression:E1 RPAREN {: RESULT=new FactorExpression(E1); RESULT.setLine(E1left); :}
			|
			(FactorNEWExpr) NEW Type:T1 LBRACK Expression:E2 RBRACK {: RESULT=new FactorNEWExpr(T1, E2); RESULT.setLine(T1left); :}
			|
			(FactorNEWParam) NEW Type:T1 LPAREN ActPars:A2 RPAREN {: RESULT=new FactorNEWParam(T1, A2); RESULT.setLine(T1left); :}
			|
			(FactorRange) RANGE LPAREN Expression:range_expr RPAREN {: RESULT=new FactorRange(range_expr); RESULT.setLine(range_exprleft); :} 
			;

/**************operators*****************/


Relop ::= 
			(RelopEqual) EQUAL {: RESULT=new RelopEqual(); :}
			|
			(RelopNotEqual) NOTEQUAL {: RESULT=new RelopNotEqual(); :}
			|
			(RelopGRT)	GRT {: RESULT=new RelopGRT(); :}
			|
			(RelopGRTE)	GRTE {: RESULT=new RelopGRTE(); :}
			|
			(RelopLESS)	LESS {: RESULT=new RelopLESS(); :}
			|
			(RelopLESSE) LESSE {: RESULT=new RelopLESSE(); :}
			;

Addop ::= 
			(AddopPLUS) PLUS {: RESULT=new AddopPLUS(); :} 
			|
			(AddopMinus)  MINUS {: RESULT=new AddopMinus(); :}
			;				

Mulop ::=
			(MulopMUL) MUL {: RESULT=new MulopMUL(); :}
			|
			(MulopDIV) DIV {: RESULT=new MulopDIV(); :}
			|
			(MulopMOD) MOD {: RESULT=new MulopMOD(); :}
			;

			